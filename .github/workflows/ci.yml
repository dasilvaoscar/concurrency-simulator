name: Simple PR Summary

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate-simple-summary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Simple PR Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // An√°lise dos arquivos modificados
            const goFiles = files.filter(f => f.filename.endsWith('.go'));
            const dockerFiles = files.filter(f => f.filename.includes('docker') || f.filename.includes('Dockerfile'));
            const configFiles = files.filter(f => f.filename.endsWith('.yml') || f.filename.endsWith('.yaml'));
            const docsFiles = files.filter(f => f.filename.endsWith('.md'));
            const testFiles = files.filter(f => f.filename.includes('test') || f.filename.includes('_test.go'));

            // Categoriza√ß√£o das mudan√ßas por servi√ßo
            const services = {
              core: files.filter(f => f.filename.includes('monorepo/core')),
              antifraud: files.filter(f => f.filename.includes('monorepo/antifraud')),
              customer: files.filter(f => f.filename.includes('monorepo/customer')),
              notification: files.filter(f => f.filename.includes('monorepo/notification')),
              transaction: files.filter(f => f.filename.includes('monorepo/transaction')),
              shared: files.filter(f => f.filename.includes('monorepo/shared')),
              observability: files.filter(f => f.filename.includes('observability')),
              docs: files.filter(f => f.filename.includes('docs'))
            };

            // Detectar tipo de mudan√ßa
            const changeTypes = [];
            if (goFiles.length > 0) changeTypes.push('üîß C√≥digo');
            if (testFiles.length > 0) changeTypes.push('üß™ Testes');
            if (dockerFiles.length > 0) changeTypes.push('üê≥ Docker');
            if (configFiles.length > 0) changeTypes.push('‚öôÔ∏è Configura√ß√£o');
            if (docsFiles.length > 0) changeTypes.push('üìö Documenta√ß√£o');

            // Estat√≠sticas
            const stats = {
              totalFiles: files.length,
              additions: files.reduce((sum, f) => sum + f.additions, 0),
              deletions: files.reduce((sum, f) => sum + f.deletions, 0),
              goFiles: goFiles.length,
              testFiles: testFiles.length,
              services: Object.keys(services).filter(key => services[key].length > 0)
            };

            // Determinar complexidade
            const complexity = stats.totalFiles > 20 ? 'üî¥ Alta' : 
                             stats.totalFiles > 10 ? 'üü° M√©dia' : 'üü¢ Baixa';

            // Gerar resumo
            let summary = `## ü§ñ Resumo Autom√°tico da PR\n\n`;
            
            // Informa√ß√µes b√°sicas
            summary += `### ‚ÑπÔ∏è Informa√ß√µes Gerais\n`;
            summary += `- **T√≠tulo:** ${pullRequest.title}\n`;
            summary += `- **Autor:** @${pullRequest.user.login}\n`;
            summary += `- **Branch:** \`${pullRequest.head.ref}\` ‚Üí \`${pullRequest.base.ref}\`\n`;
            summary += `- **Complexidade:** ${complexity}\n`;
            summary += `- **Tipos de mudan√ßa:** ${changeTypes.join(', ')}\n\n`;

            // Estat√≠sticas
            summary += `### üìä Estat√≠sticas\n`;
            summary += `| M√©trica | Valor |\n`;
            summary += `|---------|-------|\n`;
            summary += `| Arquivos modificados | ${stats.totalFiles} |\n`;
            summary += `| Linhas adicionadas | +${stats.additions} |\n`;
            summary += `| Linhas removidas | -${stats.deletions} |\n`;
            summary += `| Arquivos Go | ${stats.goFiles} |\n`;
            summary += `| Arquivos de teste | ${stats.testFiles} |\n\n`;

            // Servi√ßos afetados
            if (stats.services.length > 0) {
              summary += `### üèóÔ∏è Componentes Afetados\n`;
              stats.services.forEach(service => {
                const count = services[service].length;
                const emoji = service === 'core' ? 'üéØ' :
                             service === 'antifraud' ? 'üõ°Ô∏è' :
                             service === 'customer' ? 'üë§' :
                             service === 'notification' ? 'üì±' :
                             service === 'transaction' ? 'üí≥' :
                             service === 'shared' ? 'üîó' :
                             service === 'observability' ? 'üìä' :
                             service === 'docs' ? 'üìö' : 'üìÅ';
                summary += `- ${emoji} **${service}:** ${count} arquivo(s)\n`;
              });
              summary += `\n`;
            }

            // Arquivos principais
            summary += `### üìÅ Principais Arquivos Modificados\n`;
            const mainFiles = files.slice(0, 15);
            mainFiles.forEach(file => {
              const status = file.status === 'added' ? 'üÜï' : 
                           file.status === 'removed' ? 'üóëÔ∏è' : 
                           file.status === 'renamed' ? 'üìù' : '‚úèÔ∏è';
              const size = file.additions + file.deletions;
              const sizeIndicator = size > 100 ? 'üî¥' : size > 50 ? 'üü°' : 'üü¢';
              summary += `- ${status} ${sizeIndicator} \`${file.filename}\` (+${file.additions}/-${file.deletions})\n`;
            });

            if (files.length > 15) {
              summary += `- ... e mais ${files.length - 15} arquivo(s)\n`;
            }

            // Checklist de revis√£o
            summary += `\n### ‚úÖ Checklist de Revis√£o\n`;
            summary += `- [ ] C√≥digo segue padr√µes do projeto\n`;
            summary += `- [ ] Testes foram adicionados/atualizados\n`;
            summary += `- [ ] Documenta√ß√£o foi atualizada\n`;
            summary += `- [ ] N√£o h√° vazamentos de dados sens√≠veis\n`;
            summary += `- [ ] Performance foi considerada\n`;
            summary += `- [ ] Tratamento de erros adequado\n`;

            // Adicionar descri√ß√£o original se existir
            if (pullRequest.body && pullRequest.body.trim()) {
              summary += `\n### üìù Descri√ß√£o Original\n`;
              summary += pullRequest.body;
            }

            summary += `\n---\n*üìÖ Gerado automaticamente em ${new Date().toLocaleString('pt-BR')}*`;

            // Comentar na PR em vez de atualizar a descri√ß√£o
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });

            console.log('‚úÖ Resumo da PR gerado e comentado com sucesso!');
